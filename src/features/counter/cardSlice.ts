import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import axios from 'axios';
import { RootState, AppThunk } from '../../redux/store';
import { fetchCount } from './counterAPI';
import {  Card } from '../../utils/interfaces'
import { platform } from 'process';
import { TypedUseSelectorHook } from 'react-redux';
import type { useAppDispatch } from '../../redux/hooks'
export interface CardState {
  value: number;
  cards : Card[]
  status: 'idle' | 'loading' | 'failed'| 'succeded';
}

type Filters = {
  Plataforma: string,
  Categoria:string,
  Ordenar:string
}
const initialState: CardState = {
  value: 0,
  cards :[],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
const headers = {
  
};

export const getAllCards = createAsyncThunk(
  'cards/getAllCards',
  async () => {
    const response = await axios.get('https://db.ygoprodeck.com/api/v7/cardinfo.php?archetype=Blue-Eyes',{
      headers: {
        'Content-Type': 'text/plain'//the token is a variable which holds the token
      }
    })
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const cardSlice = createSlice({
  name: 'cards',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setFilters:((state,action)=>{
    })
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
     builder
       .addCase(getAllCards.pending, (state) => {
         state.status = 'loading';
       })
       .addCase(getAllCards.fulfilled, (state, action: any) => {
         state.status = 'succeded';
        state.cards = action.payload.data;
       })
       .addCase(getAllCards.rejected, (state, action: any) => {
        state.status = 'failed';
       state.cards = action.error;
      })     
      
 }

});

export const {setFilters}=cardSlice.actions
export default cardSlice.reducer;
