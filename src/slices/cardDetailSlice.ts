import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import axios from 'axios';
import { Card } from '../utils/interfaces'
export interface GameDetail {
  detail : Card | null,
  status: 'idle' | 'loading' | 'failed'| 'succeded';
}

const initialState: GameDetail = {
  detail :null,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCardDetail = createAsyncThunk(
  'cardDetail/getCardDetail',
  async (id:string) => {
    const response = await axios.get(`https://db.ygoprodeck.com/api/v7/cardinfo.php?id=${id}`)
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const cardDetail = createSlice({
  name: 'cardDetail',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
     builder
       .addCase(getCardDetail.pending, (state) => {
         state.status = 'loading';
       })
       .addCase(getCardDetail.fulfilled, (state, action: any) => {
         state.status = 'succeded';
        state.detail = action.payload.data[0];
       });
  },
});


export default cardDetail.reducer;
